name: "Publish all libs, Arrow-stack and Docs"

on:
  push:
    tags:
      - '+([0-9]).+([0-9]).+([0-9])?(-+([a-z]).+([0-9]))'

env:
  BASEDIR: ${{github.workspace}}/arrow-libs
  SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
  SONATYPE_PWD: ${{ secrets.SONATYPE_PWD }}
  ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
  ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword }}
  OSS_USER: '${{ secrets.OSS_USER }}'
  OSS_TOKEN: '${{ secrets.OSS_TOKEN }}'
  OSS_STAGING_PROFILE_ID: '${{ secrets.OSS_STAGING_PROFILE_ID }}'
  SIGNING_KEY_NAME: '${{ secrets.SIGNING_KEY_NAME }}'
  SIGNING_KEY_ID: '${{ secrets.SIGNING_KEY_ID }}'
  SIGNING_KEY_PASSPHRASE: '${{ secrets.SIGNING_KEY_PASSPHRASE }}'
  SIGNING_KEY: '${{ secrets.SIGNING_KEY }}'
  GRADLE_PUBLISH_KEY: '${{ secrets.GRADLE_PUBLISH_KEY }}'
  GRADLE_PUBLISH_SECRET: '${{ secrets.GRADLE_PUBLISH_SECRET }}'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v2.4.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Restore Gradle cache
        id: cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.konan
          key: mac-step-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            mac-step-gradle-

      - name: Build
        run: ./gradlew build

      - name: Stop Gradle daemons
        run: ./gradlew --stop

  publish:
    needs: build

    timeout-minutes: 35

    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Restore Gradle cache
        id: cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.konan
          key: mac-step-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            mac-step-gradle-

      - name: Publish alpha version
        if: ${{ github.ref == 'refs/heads/main' && contains(env.lib_version, "alpha") }}
        run: ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository

      - name: Publish final version
        if: ${{ github.ref == 'refs/heads/main' && !contains(env.lib_version, "alpha") && !contains(env.lib_version, "beta") && !contains(env.lib_version, "rc") }}
        run: ./gradlew publishToSonatype closeSonatypeStagingRepository

      - name: Stop Gradle daemons
        run: ./gradlew --stop

  publish_doc:
    needs: publish

    timeout-minutes: 60

    runs-on: macos-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_CLOUDFRONT_ID: ${{ secrets.AWS_CLOUDFRONT_ID }}
      AWS_DEFAULT_REGION: eu-west-1
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.configureondemand=true -Dorg.gradle.jvmargs=-Xmx8g -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -XX:+CMSClassUnloadingEnabled -Dfile.encoding=UTF-8 -Dorg.gradle.parallel=false"
      JAVA_OPTS: -Xms2g -Xmx4g
      JEKYLL_ENV: production
      S3_BUCKET: ${{ secrets.S3_BUCKET }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Setup"
        run: brew install grep

      - name: Set version to an environment variable
        run: echo "lib_version=$(head -n 1 build/semver/version.txt)" >> $GITHUB_ENV

      - name: "Prepare environment"
        working-directory: arrow-site
        run: |
          mkdir $BASEDIR/logs
          brew install tree
          bundle config set --local path 'vendor/bundle'
          bundle install --gemfile Gemfile

      - name: "Create API doc"
        run: ./gradlew dokkaGfm

      - name: "Landing page: build"
        working-directory: arrow-site
        if: ${{ github.ref == 'refs/heads/main' && !contains(env.lib_version, "alpha") && !contains(env.lib_version, "beta") && !contains(env.lib_version, "rc") }}
        run: |
          bundle exec jekyll build -b docs -s docs
          tree _site > $BASEDIR/logs/content.log

      - name: "Landing page: publish"
        working-directory: arrow-site
        if: ${{ github.ref == 'refs/heads/main' && !contains(env.lib_version, "alpha") && !contains(env.lib_version, "beta") && !contains(env.lib_version, "rc") }}
        run: |
          echo ">>> Landing page" >> $BASEDIR/logs/aws_sync.log
          ${GITHUB_WORKSPACE}/.github/scripts/publish-landing-page.sh

      - name: "Latest release: publish (/docs)"
        working-directory: arrow-site
        if: ${{ github.ref == 'refs/heads/main' && !contains(env.lib_version, "alpha") && !contains(env.lib_version, "beta") && !contains(env.lib_version, "rc") }}
        run: |
          echo ">>> Latest release" >> $BASEDIR/logs/aws_sync.log
          ${GITHUB_WORKSPACE}/.github/scripts/publish-latest-release.sh

      - name: "Latest release: build release directory (/docs/<major.minor.patch>)"
        if: ${{ github.ref == 'refs/heads/main' && !contains(env.lib_version, "alpha") && !contains(env.lib_version, "beta") && !contains(env.lib_version, "rc") }}
        working-directory: arrow-site
        run: |
          bundle exec jekyll build -b docs/${{ env.lib_version }} -s docs
          tree _site > $BASEDIR/logs/content_docs-${{ env.lib_version }}.log

      - name: "Latest release: publish release directory (/docs/<major.minor.patch>)"
        if: ${{ github.ref == 'refs/heads/main' && !contains(env.lib_version, "alpha") && !contains(env.lib_version, "beta") && !contains(env.lib_version, "rc") }}
        working-directory: arrow-site
        run: |
          if [ "${{ env.lib_version }}" != "" ]; then
            aws s3 sync _site s3://$S3_BUCKET/docs/${{ env.lib_version }} --delete --exclude "index.html" >> $BASEDIR/logs/aws_sync.log
          else
            exit 1
          fi

      - name: "Next version: build (/docs/next)"
        working-directory: arrow-site
        if: ${{ github.ref == 'refs/heads/main' && contains(env.lib_version, "alpha") }}
        run: |
          bundle exec jekyll build -b docs/next -s docs
          tree _site > $BASEDIR/logs/content_docs-next.log

      - name: "Next version: publish (/docs/next)"
        working-directory: arrow-site
        if: ${{ github.ref == 'refs/heads/main' && contains(env.lib_version, "alpha") }}
        run: |
          aws s3 sync _site s3://$S3_BUCKET/docs/next --delete --exclude "index.html" >> $BASEDIR/logs/aws_sync.log

      - name: "Site: publish sitemap.xml"
        if: ${{ github.ref == 'refs/heads/main' && !contains(env.lib_version, "alpha") && !contains(env.lib_version, "beta") && !contains(env.lib_version, "rc") }}
        run: |
          ${GITHUB_WORKSPACE}/.github/scripts/create-sitemap.sh > sitemap.xml
          aws s3 cp sitemap.xml s3://$S3_BUCKET/sitemap.xml >> $BASEDIR/logs/aws_sync.log

      - name: CloudFront cache invalidation
        run: aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_ID --paths "/*"

      - name: List S3
        run: aws s3 ls s3://$S3_BUCKET --recursive --summarize > $BASEDIR/logs/site-content.log

      - uses: actions/upload-artifact@v2
        with:
          name: logs
          path: arrow-libs/logs

      - name: Stop Gradle daemons
        run: ./gradlew --stop
